{
  "preset_name": "ArchSpec Bootstrap",
  "preset_version": "0.1.0",
  "preset_description": "Initial configuration for ArchSpec bootstrap version",
  "project": {
    "name": "ArchSpec",
    "description": "AI-driven software specification system",
    "version": "0.1.0",
    "type": "web_application"
  },
  "technology_stack": {
    "frontend": {
      "framework": "React",
      "language": "JavaScript",
      "build_tool": "Vite",
      "styling": "TailwindCSS",
      "key_libraries": [
        { "name": "react-router-dom", "version": "^6.8.0" },
        { "name": "axios", "version": "^1.3.0" },
        { "name": "mermaid", "version": "^10.0.0" },
        { "name": "react-hook-form", "version": "^7.43.0" },
        { "name": "react-query", "version": "^3.39.0" },
        { "name": "react-markdown", "version": "^8.0.0" },
        { "name": "file-saver", "version": "^2.0.5" }
      ]
    },
    "backend": {
      "framework": "FastAPI",
      "language": "Python",
      "runtime": "Python 3.9+",
      "key_libraries": [
        { "name": "fastapi", "version": "^0.95.0" },
        { "name": "uvicorn", "version": "^0.22.0" },
        { "name": "pydantic", "version": "^1.10.0" },
        { "name": "openai", "version": "^1.0.0" },
        { "name": "python-multipart", "version": "^0.0.6" },
        { "name": "pymongo", "version": "^4.3.0" },
        { "name": "motor", "version": "^3.1.0" },
        { "name": "pytest", "version": "^7.3.0" },
        { "name": "pytest-asyncio", "version": "^0.21.0" }
      ]
    },
    "database": {
      "type": "MongoDB",
      "version": "6.0",
      "connection": "local or MongoDB Atlas"
    }
  },
  "frontend_structure": {
    "base_path": "./frontend",
    "entry_point": "src/index.js",
    "public_folder": "public",
    "components": [
      {
        "name": "App",
        "type": "core",
        "path": "src/App.js",
        "description": "Main application component",
        "dependencies": ["Navbar", "Router"]
      },
      {
        "name": "Navbar",
        "type": "common",
        "path": "src/components/common/Navbar.js",
        "description": "Navigation bar component",
        "dependencies": []
      },
      {
        "name": "Dashboard",
        "type": "page",
        "path": "src/pages/Dashboard.js",
        "description": "Project dashboard page",
        "dependencies": ["ProjectCard", "CreateProjectButton"]
      },
      {
        "name": "ProjectCard",
        "type": "dashboard",
        "path": "src/components/dashboard/ProjectCard.js",
        "description": "Project summary card component",
        "dependencies": []
      },
      {
        "name": "CreateProjectButton",
        "type": "dashboard",
        "path": "src/components/dashboard/CreateProjectButton.js",
        "description": "Button to create new projects",
        "dependencies": []
      },
      {
        "name": "ProjectSetup",
        "type": "page",
        "path": "src/pages/ProjectSetup.js",
        "description": "Project creation page",
        "dependencies": ["FormContainer"]
      },
      {
        "name": "RequirementsForm",
        "type": "page",
        "path": "src/pages/RequirementsForm.js",
        "description": "Requirements input form page",
        "dependencies": ["FormContainer"]
      },
      {
        "name": "ArchitectureForm",
        "type": "page",
        "path": "src/pages/ArchitectureForm.js",
        "description": "Architecture options form page",
        "dependencies": ["FormContainer"]
      },
      {
        "name": "FormContainer",
        "type": "forms",
        "path": "src/components/forms/FormContainer.js",
        "description": "Container for form inputs",
        "dependencies": [
          "TextInput",
          "TextArea",
          "SelectInput",
          "CheckboxGroup"
        ]
      },
      {
        "name": "TextInput",
        "type": "forms",
        "path": "src/components/forms/TextInput.js",
        "description": "Text input component",
        "dependencies": []
      },
      {
        "name": "TextArea",
        "type": "forms",
        "path": "src/components/forms/TextArea.js",
        "description": "Text area input component",
        "dependencies": []
      },
      {
        "name": "SelectInput",
        "type": "forms",
        "path": "src/components/forms/SelectInput.js",
        "description": "Dropdown selection component",
        "dependencies": []
      },
      {
        "name": "CheckboxGroup",
        "type": "forms",
        "path": "src/components/forms/CheckboxGroup.js",
        "description": "Group of checkbox inputs",
        "dependencies": []
      },
      {
        "name": "GenerationScreen",
        "type": "page",
        "path": "src/pages/GenerationScreen.js",
        "description": "Artifact generation status page",
        "dependencies": []
      },
      {
        "name": "ReviewScreen",
        "type": "page",
        "path": "src/pages/ReviewScreen.js",
        "description": "Specification review page",
        "dependencies": ["TabNavigator", "SpecificationSection"]
      },
      {
        "name": "TabNavigator",
        "type": "review",
        "path": "src/components/review/TabNavigator.js",
        "description": "Navigation tabs for specification",
        "dependencies": []
      },
      {
        "name": "SpecificationSection",
        "type": "review",
        "path": "src/components/review/SpecificationSection.js",
        "description": "Container for specification section content",
        "dependencies": ["DiagramViewer", "SchemaViewer", "DocumentViewer"]
      },
      {
        "name": "DiagramViewer",
        "type": "review",
        "path": "src/components/review/DiagramViewer.js",
        "description": "Mermaid diagram rendering component",
        "dependencies": ["MermaidRenderer"]
      },
      {
        "name": "SchemaViewer",
        "type": "review",
        "path": "src/components/review/SchemaViewer.js",
        "description": "JSON schema visualization component",
        "dependencies": []
      },
      {
        "name": "DocumentViewer",
        "type": "review",
        "path": "src/components/review/DocumentViewer.js",
        "description": "Markdown document renderer",
        "dependencies": []
      },
      {
        "name": "MermaidRenderer",
        "type": "review",
        "path": "src/components/review/MermaidRenderer.js",
        "description": "Mermaid diagram renderer component",
        "dependencies": []
      },
      {
        "name": "ExportScreen",
        "type": "page",
        "path": "src/pages/ExportScreen.js",
        "description": "Specification export options page",
        "dependencies": []
      }
    ],
    "services": [
      {
        "name": "api",
        "path": "src/services/api.js",
        "description": "API client service",
        "methods": [
          "getProjects",
          "createProject",
          "getProject",
          "updateProject",
          "deleteProject",
          "getSpecification",
          "updateSpecification",
          "generateArtifacts",
          "exportProject"
        ]
      },
      {
        "name": "storage",
        "path": "src/services/storage.js",
        "description": "Local storage service",
        "methods": ["saveItem", "getItem", "removeItem"]
      }
    ],
    "utils": [
      {
        "name": "validation",
        "path": "src/utils/validation.js",
        "description": "Form validation utility functions",
        "methods": ["validateRequired", "validateProjectName", "validateEmail"]
      },
      {
        "name": "formatting",
        "path": "src/utils/formatting.js",
        "description": "Data formatting utility functions",
        "methods": ["formatDate", "formatFileSize", "truncateText"]
      }
    ]
  },
  "backend_structure": {
    "base_path": "./backend",
    "entry_point": "app/main.py",
    "api_routes": [
      {
        "path": "/api/projects",
        "file": "app/api/routes/projects.py",
        "methods": ["GET", "POST"],
        "description": "Project collection endpoints"
      },
      {
        "path": "/api/projects/{id}",
        "file": "app/api/routes/projects.py",
        "methods": ["GET", "PUT", "DELETE"],
        "description": "Single project endpoints"
      },
      {
        "path": "/api/projects/{id}/specification",
        "file": "app/api/routes/specifications.py",
        "methods": ["GET", "POST"],
        "description": "Project specification endpoints"
      },
      {
        "path": "/api/projects/{id}/specification/generate",
        "file": "app/api/routes/specifications.py",
        "methods": ["POST"],
        "description": "Artifact generation endpoint"
      },
      {
        "path": "/api/projects/{id}/export",
        "file": "app/api/routes/export.py",
        "methods": ["GET"],
        "description": "Specification export endpoint"
      }
    ],
    "services": [
      {
        "name": "AIService",
        "file": "app/services/ai_service.py",
        "description": "Handles interactions with OpenAI API",
        "methods": [
          "process_specification",
          "_generate_prompt",
          "_parse_ai_content"
        ]
      },
      {
        "name": "GeneratorService",
        "file": "app/services/generator_service.py",
        "description": "Generates artifacts from specifications",
        "methods": [
          "generate_artifacts",
          "_generate_api_doc",
          "_generate_implementation_doc"
        ]
      },
      {
        "name": "ExportService",
        "file": "app/services/export_service.py",
        "description": "Handles exporting specifications",
        "methods": [
          "export_specification",
          "_generate_markdown",
          "_create_zip_file"
        ]
      }
    ],
    "models": [
      {
        "name": "Project",
        "file": "app/schemas/project.py",
        "description": "Project data model",
        "fields": [
          { "name": "id", "type": "str", "optional": false },
          { "name": "name", "type": "str", "optional": false },
          { "name": "description", "type": "str", "optional": true },
          { "name": "created_at", "type": "datetime", "optional": false },
          { "name": "updated_at", "type": "datetime", "optional": false },
          { "name": "template_type", "type": "str", "optional": false },
          { "name": "status", "type": "str", "optional": false },
          { "name": "metadata", "type": "dict", "optional": true }
        ]
      },
      {
        "name": "Specification",
        "file": "app/schemas/specification.py",
        "description": "Specification data model",
        "fields": [
          { "name": "id", "type": "str", "optional": false },
          { "name": "project_id", "type": "str", "optional": false },
          { "name": "requirements", "type": "dict", "optional": false },
          { "name": "architecture", "type": "dict", "optional": true },
          { "name": "data_model", "type": "dict", "optional": true },
          { "name": "api_endpoints", "type": "list", "optional": true },
          { "name": "implementation", "type": "dict", "optional": true },
          { "name": "created_at", "type": "datetime", "optional": false },
          { "name": "updated_at", "type": "datetime", "optional": false }
        ]
      },
      {
        "name": "Artifact",
        "file": "app/schemas/artifact.py",
        "description": "Generated artifact data model",
        "fields": [
          { "name": "id", "type": "str", "optional": false },
          { "name": "specification_id", "type": "str", "optional": false },
          { "name": "type", "type": "str", "optional": false },
          { "name": "format", "type": "str", "optional": false },
          { "name": "content", "type": "str", "optional": false },
          { "name": "created_at", "type": "datetime", "optional": false }
        ]
      }
    ],
    "tests": [
      {
        "name": "test_projects",
        "file": "tests/api/test_projects.py",
        "description": "Tests for project API endpoints"
      },
      {
        "name": "test_specifications",
        "file": "tests/api/test_specifications.py",
        "description": "Tests for specification API endpoints"
      },
      {
        "name": "test_export",
        "file": "tests/api/test_export.py",
        "description": "Tests for export API endpoints"
      },
      {
        "name": "test_ai_service",
        "file": "tests/services/test_ai_service.py",
        "description": "Tests for AI service"
      },
      {
        "name": "test_generator_service",
        "file": "tests/services/test_generator_service.py",
        "description": "Tests for generator service"
      }
    ]
  },
  "database_schema": {
    "collections": [
      {
        "name": "projects",
        "description": "Project collection",
        "fields": [
          {
            "name": "_id",
            "type": "ObjectId",
            "description": "Unique identifier"
          },
          { "name": "name", "type": "string", "description": "Project name" },
          {
            "name": "description",
            "type": "string",
            "description": "Project description"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "description": "Creation date"
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "description": "Last update date"
          },
          {
            "name": "template_type",
            "type": "string",
            "description": "Project template type"
          },
          {
            "name": "status",
            "type": "string",
            "description": "Project status"
          },
          {
            "name": "metadata",
            "type": "object",
            "description": "Additional metadata"
          }
        ]
      },
      {
        "name": "specifications",
        "description": "Project specifications collection",
        "fields": [
          {
            "name": "_id",
            "type": "ObjectId",
            "description": "Unique identifier"
          },
          {
            "name": "project_id",
            "type": "ObjectId",
            "description": "Reference to project"
          },
          {
            "name": "requirements",
            "type": "object",
            "description": "Project requirements"
          },
          {
            "name": "architecture",
            "type": "object",
            "description": "Architecture definitions"
          },
          {
            "name": "data_model",
            "type": "object",
            "description": "Data model definitions"
          },
          {
            "name": "api_endpoints",
            "type": "array",
            "description": "API endpoint definitions"
          },
          {
            "name": "implementation",
            "type": "object",
            "description": "Implementation details"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "description": "Creation date"
          },
          {
            "name": "updated_at",
            "type": "datetime",
            "description": "Last update date"
          }
        ]
      },
      {
        "name": "artifacts",
        "description": "Generated artifacts collection",
        "fields": [
          {
            "name": "_id",
            "type": "ObjectId",
            "description": "Unique identifier"
          },
          {
            "name": "specification_id",
            "type": "ObjectId",
            "description": "Reference to specification"
          },
          {
            "name": "type",
            "type": "string",
            "description": "Artifact type (diagram, schema, document)"
          },
          {
            "name": "format",
            "type": "string",
            "description": "Artifact format (mermaid, json, markdown)"
          },
          {
            "name": "content",
            "type": "string",
            "description": "Artifact content"
          },
          {
            "name": "created_at",
            "type": "datetime",
            "description": "Creation date"
          }
        ]
      }
    ],
    "indexes": [
      {
        "collection": "projects",
        "fields": ["name"],
        "unique": true
      },
      {
        "collection": "specifications",
        "fields": ["project_id"],
        "unique": true
      },
      {
        "collection": "artifacts",
        "fields": ["specification_id", "type"],
        "unique": false
      }
    ]
  },
  "templates": {
    "web_app": {
      "name": "Web Application",
      "description": "Standard web application with frontend and backend",
      "requirements_template": {
        "project_type": "web_app",
        "functional_requirements": [
          "User authentication and registration",
          "Dashboard for users to view and manage resources",
          "Admin panel for system management",
          "RESTful API endpoints for data operations"
        ],
        "non_functional_requirements": [
          "Responsive design for mobile and desktop",
          "Secure data storage and transmission",
          "Fast loading times and performance optimization",
          "Accessibility compliance"
        ],
        "tech_stack": {
          "frontend": "React",
          "backend": "Python/FastAPI",
          "database": "MongoDB"
        }
      },
      "architecture_template": {
        "pattern": "Model-View-Controller",
        "components": [
          "Frontend (React SPA)",
          "Backend API (FastAPI)",
          "Database Layer (MongoDB)",
          "Authentication Service"
        ],
        "data_flow": [
          "User interacts with React SPA",
          "SPA makes API requests to FastAPI backend",
          "Backend processes requests and interacts with database",
          "Backend returns data to frontend for rendering"
        ]
      },
      "data_model_template": {
        "entities": [
          {
            "name": "User",
            "attributes": [
              {
                "name": "id",
                "type": "string",
                "constraints": ["primary_key"]
              },
              {
                "name": "username",
                "type": "string",
                "constraints": ["unique", "indexed"]
              },
              {
                "name": "email",
                "type": "string",
                "constraints": ["unique", "indexed"]
              },
              { "name": "password_hash", "type": "string", "constraints": [] },
              { "name": "created_at", "type": "datetime", "constraints": [] }
            ]
          },
          {
            "name": "Project",
            "attributes": [
              {
                "name": "id",
                "type": "string",
                "constraints": ["primary_key"]
              },
              { "name": "name", "type": "string", "constraints": [] },
              { "name": "description", "type": "string", "constraints": [] },
              {
                "name": "owner_id",
                "type": "string",
                "constraints": ["foreign_key:User.id"]
              },
              { "name": "created_at", "type": "datetime", "constraints": [] }
            ]
          }
        ]
      },
      "api_endpoints_template": [
        {
          "path": "/api/auth/register",
          "method": "POST",
          "description": "Register a new user",
          "request_body": "{\"username\": \"string\", \"email\": \"string\", \"password\": \"string\"}",
          "response": "{\"id\": \"string\", \"username\": \"string\", \"email\": \"string\"}"
        },
        {
          "path": "/api/auth/login",
          "method": "POST",
          "description": "Log in a user",
          "request_body": "{\"username\": \"string\", \"password\": \"string\"}",
          "response": "{\"access_token\": \"string\", \"token_type\": \"string\"}"
        },
        {
          "path": "/api/projects",
          "method": "GET",
          "description": "Get all projects for the authenticated user",
          "request_body": "",
          "response": "{\"projects\": [{\"id\": \"string\", \"name\": \"string\", \"description\": \"string\"}]}"
        },
        {
          "path": "/api/projects",
          "method": "POST",
          "description": "Create a new project",
          "request_body": "{\"name\": \"string\", \"description\": \"string\"}",
          "response": "{\"id\": \"string\", \"name\": \"string\", \"description\": \"string\"}"
        }
      ],
      "implementation_template": {
        "file_structure": [
          "frontend/",
          "frontend/src/",
          "frontend/src/components/",
          "frontend/src/pages/",
          "frontend/src/services/",
          "frontend/src/utils/",
          "backend/",
          "backend/app/",
          "backend/app/api/",
          "backend/app/core/",
          "backend/app/db/",
          "backend/app/schemas/",
          "backend/app/services/"
        ],
        "key_components": [
          "Authentication System",
          "Project Management UI",
          "API Client Service",
          "Database Models",
          "API Routes",
          "User Interface Components"
        ]
      }
    }
  },
  "build_configuration": {
    "frontend": {
      "development": {
        "command": "npm run dev",
        "port": 3000,
        "environment_variables": {
          "VITE_API_URL": "http://localhost:8000"
        }
      },
      "production": {
        "command": "npm run build",
        "output_directory": "dist",
        "environment_variables": {
          "VITE_API_URL": "/api"
        }
      }
    },
    "backend": {
      "development": {
        "command": "uvicorn app.main:app --reload --port 8000",
        "environment_variables": {
          "OPENAI_API_KEY": "",
          "MONGODB_URL": "mongodb://localhost:27017",
          "DATABASE_NAME": "archspec"
        }
      },
      "production": {
        "command": "uvicorn app.main:app --host 0.0.0.0 --port 8000",
        "environment_variables": {
          "OPENAI_API_KEY": "",
          "MONGODB_URL": "",
          "DATABASE_NAME": "archspec"
        }
      }
    },
    "docker": {
      "services": [
        {
          "name": "frontend",
          "image": "node:18-alpine",
          "ports": ["3000:3000"],
          "volumes": ["./frontend:/app"]
        },
        {
          "name": "backend",
          "image": "python:3.9-slim",
          "ports": ["8000:8000"],
          "volumes": ["./backend:/app"]
        },
        {
          "name": "mongodb",
          "image": "mongo:6.0",
          "ports": ["27017:27017"],
          "volumes": ["mongodb_data:/data/db"]
        }
      ]
    }
  }
}
